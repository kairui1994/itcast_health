<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!--导入redis配置-->
	<!--<import resource="spring-redis.xml"/>-->
	<context:property-placeholder location="classpath:*.properties" />

	<dubbo:application name="health_service_provider"/>
	<!--2.配置注册中心的地址-->
	<dubbo:registry address="zookeeper://127.0.0.1:2181"/>
	<!--3.配置dubbo包扫描-->
	<dubbo:annotation package="com.xdsdjq.service.impl" />

	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!--数据源-->
	<bean id="dataSource"
	      class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
	</bean>

	<!--spring和mybatis整合的工厂bean-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:SqlMapConfig.xml" />
		<property name="typeAliasesPackage" value="com.xdsdjq.pojo"/>
	</bean>

	<!--批量扫描接口生成代理对象-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--指定接口所在的包-->
		<property name="basePackage" value="com.xdsdjq.dao" />
	</bean>

	<!-- 事务管理器  -->
	<bean id="transactionManager"
	      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!--
		开启事务控制的注解支持
		注意：此处必须加入proxy-target-class="true"，
			  需要进行事务控制，会由Spring框架产生代理对象，
			  Dubbo需要将Service发布为服务，要求必须使用cglib创建代理对象。
	-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


	<!--Jedis连接池的相关配置-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal">
			<value>200</value>
		</property>
		<property name="maxIdle">
			<value>50</value>
		</property>
		<property name="testOnBorrow" value="true"/>
		<property name="testOnReturn" value="true"/>
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.host}" />
		<constructor-arg name="port" value="${redis.port}" type="int" />
		<constructor-arg name="timeout" value="${redis.timeout}" type="int" />
	</bean>


</beans>